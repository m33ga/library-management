stages:
  # - build
  # - push
  - build-production

image: docker:latest

services:
  - docker:dind

before_script:
  - docker info

# build:
#   stage: build
#   script:
#     - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-group05/user_management_service:latest -f user_management_service/compose/production/django/Dockerfile .
#     - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-group05/frontend:latest -f frontend/compose/Dockerfile.prod .
#     - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-group05/notification_service:latest -f notification_service/compose/production/django/Dockerfile .
#     - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-group05/catalog_management_service:latest -f catalog_management_service/compose/production/django/Dockerfile .
#     - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-group05/reservation_service:latest -f reservation_service/compose/production/django/Dockerfile .
#     - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-group05/loan_service:latest -f loan_service/compose/production/django/Dockerfile .
#     - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-group05/custom_nginx:latest -f compose/.production/Dockerfile .
#   tags:
#     - docker
#   only:
#     - main


# push:
#   stage: push
#   script:
#     - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
#     - docker push ${CI_REGISTRY}/library_management_system-group05/user_management_service:latest
#     - docker push ${CI_REGISTRY}/library_management_system-group05/frontend:latest
#     - docker push ${CI_REGISTRY}/library_management_system-group05/notification_service:latest
#     - docker push ${CI_REGISTRY}/library_management_system-group05/catalog_management_service:latest
#     - docker push ${CI_REGISTRY}/library_management_system-group05/reservation_service:latest
#     - docker push ${CI_REGISTRY}/library_management_system-group05/loan_service:latest
#     - docker push ${CI_REGISTRY}/library_management_system-group05/custom_nginx:latest
#   tags:
#     - docker
#   only:
#     - main

build-back-end-production-job:
  stage: build_production
  tags:
    - shared
  only:
    - main
  variables:
    SSH_HOST: $REMOTE_IP
    SSH_USER: $REMOTE_USER
    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY_production
    DOCKER_HOST: "tcp://$REMOTE_IP"
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production environment..."
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "mkdir -p /home/$SSH_USER/$CI_PROJECT_NAME"
    - scp -r * $SSH_USER@$SSH_HOST:/home/$SSH_USER/$CI_PROJECT_NAME/
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
        cd /home/$SSH_USER/$CI_PROJECT_NAME &&
        rm -f .env &&
        touch .env &&
        sudo docker compose down -v &&
        sudo docker system prune -f -a  &&
        sudo docker compose up -d --build
