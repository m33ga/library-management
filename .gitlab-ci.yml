stages:
  - build
  - push
  - deploy

image: docker:latest

services:
  - docker:dind

before_script:
  - docker info

build:
  stage: build
  script:
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system/user_management_service:latest -f user_management_service/compose/production/django/Dockerfile .
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system/frontend:latest -f frontend/compose/Dockerfile.prod .
  tags:
    - docker

push:
  stage: push
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker push ${CI_REGISTRY}/library_management_system/user_management_service:latest
    - docker push ${CI_REGISTRY}/library_management_system/frontend:latest
  tags:
    - docker

deploy:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa 
    - ssh-keyscan -H ${SSH_HOST} >> ~/.ssh/known_hosts
    - scp -r * ${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd /home/$SSH_USER &&sudo docker compose down && sudo docker system prune -f -a && sudo docker compose up -d --build"
    #- ssh -T ${REMOTE_USER}@${REMOTE_SERVER} "sudo docker compose down && sudo docker system prune -f -a && sudo docker compose up -d --build"
  tags:
    - docker

