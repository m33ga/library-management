stages:
  - build
  - push
  - deploy

image: docker:latest

services:
  - docker:dind

before_script:
  - docker info

build:
  stage: build
  script:
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-grop05/user_management_service:latest -f user_management_service/compose/production/django/Dockerfile .
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-grop05/frontend:latest -f frontend/compose/Dockerfile.prod .
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-grop05/notification_service:latest -f notification_service/compose/production/django/Dockerfile .

  tags:
    - docker
  only:
    - main


push:
  stage: push
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker push ${CI_REGISTRY}/library_management_system-grop05/user_management_service:latest
    - docker push ${CI_REGISTRY}/library_management_system-grop05/frontend:latest
    - docker push ${CI_REGISTRY}/library_management_system-grop05/notification_service:latest
  tags:
    - docker
  only:
    - main

deploy:
  stage: deploy
  script:
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 700 ~/.ssh/id_rsa
  - ssh-keyscan -H ${SSH_HOST} >> ~/.ssh/known_hosts
  - |
    ssh $SSH_USER@$SSH_HOST <<EOF
    echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    EOF
  - scp docker-compose.production.yml ${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/docker-compose.yml
  - ssh $SSH_USER@$SSH_HOST "docker compose -f docker-compose.prod.yml pull && docker compose -f docker-compose.prod.yml up -d --remove-orphans"
  tags:
  - docker
  only:
      - main
