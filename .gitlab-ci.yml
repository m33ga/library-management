stages:
  - build
  - push
  - deploy

image: docker:latest

services:
  - docker:dind

before_script:
  - docker info

build:
  stage: build
  script:
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-grop05/user_management_service:latest -f user_management_service/compose/production/django/Dockerfile .
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-grop05/frontend:latest -f frontend/compose/Dockerfile.prod .
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system-grop05/notification_service:latest -f notification_service/compose/production/django/Dockerfile .
  tags:
    - docker
  only:
    - main

push:
  stage: push
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker push ${CI_REGISTRY}/library_management_system-grop05/user_management_service:latest
    - docker push ${CI_REGISTRY}/library_management_system-grop05/frontend:latest
    - docker push ${CI_REGISTRY}/library_management_system-grop05/notification_service:latest
  tags:
    - docker
  only:
    - main
deploy:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
    - |
      if [ -z "$CI_REGISTRY_USER" ] || [ -z "$CI_REGISTRY_PASSWORD" ] || [ -z "$CI_REGISTRY" ]; then
        echo "Error: One or more required environment variables (CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY) are missing."
        exit 1
      fi
    - |
      ssh $SSH_USER@$SSH_HOST <<EOF
      echo "Debug: Exporting environment variables"
      export CI_REGISTRY_USER="$CI_REGISTRY_USER"
      export CI_REGISTRY_PASSWORD="$CI_REGISTRY_PASSWORD"
      export CI_REGISTRY="$CI_REGISTRY"
      echo "Attempting docker login"
      echo "\$CI_REGISTRY_PASSWORD" | docker login "\$CI_REGISTRY" --username "\$CI_REGISTRY_USER" --password-stdin
      if [ \$? -ne 0 ]; then
        echo "Docker login failed"
        exit 1
      fi
      echo "Docker login succeeded"
      EOF
    - scp docker-compose.production.yml ${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/docker-compose.yml
    - scp -r .envs/.production ${SSH_USER}@${SSH_HOST}:/home/${SSH_USER}/loan_service/.envs/.production
    - ssh $SSH_USER@$SSH_HOST "
        docker compose -f /home/${SSH_USER}/docker-compose.yml pull &&
        docker compose -f /home/${SSH_USER}/docker-compose.yml up -d --remove-orphans
      "
  tags:
    - docker
  only:
    - main

