stages:
  - build
  - push
  - deploy

image: docker:latest

services:
  - docker:dind

before_script:
  - docker info

build:
  stage: build
  script:
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system/user_management_service:latest -f user_management_service/compose/production/django/Dockerfile .
    - docker buildx build --platform linux/amd64 -t ${CI_REGISTRY}/library_management_system/frontend:latest -f frontend/compose/Dockerfile.prod .
  tags:
    - docker

push:
  stage: push
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker push ${CI_REGISTRY}/library_management_system/user_management_service:latest
    - docker push ${CI_REGISTRY}/library_management_system/frontend:latest
  tags:
    - docker

deploy:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - scp docker-compose.prod.yml ${REMOTE_USER}@${REMOTE_SERVER}:/home/${REMOTE_USER}/docker-compose.yml
    - ssh -T ${REMOTE_USER}@${REMOTE_SERVER} << EOF
        echo '$CI_REGISTRY_PASSWORD' | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
        cd /home/${REMOTE_USER} && docker compose --env-file /home/${REMOTE_USER}/env_file pull && docker compose --env-file /home/${REMOTE_USER}/env_file up -d
      EOF
  tags:
    - docker